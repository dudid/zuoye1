#include<stdio.h>
#include<stdlib.h>
#include<string.h>
int saveflag=0;            /* 单链表内容有无发生改变，是否需要保存到磁盘
的标志变量 */
struct employee
{
	//员工基本信息
    char num[10];          /* 工号 */
	char name[50];         /* 姓名 */
	int base_salary;        /* 基本工资 */
	int pro_salary;           /* 岗位津贴 */
	int other_salary;    /* 其他补贴 */
	//扣除项目
	int tax;            /* 所得税 */
	int home_money ;        /* 住房公积金 */
	int old_money;     /* 养老金 */
	int medicial_money;        /* 医疗保险*/
	int losswork_money;     /* 失业保险*/
	int real_salary;       /* 实际工资*/
	int should_salary;        /* 应发工资*/

};

typedef struct Node 
{ 
	struct employee data; 
	struct Node *next; 
}ListNode,*LinkList;//建立链表

void InitList(LinkList *head)   /*将单链表初始化为空。动态生成一个头结点，并将头结点的指针域置为空*/
{
	if((*head=(LinkList)malloc(sizeof(ListNode)))==NULL)   /*为头结点分配一个存储空间*/
		printf("系统分配存储空间失败！\n");
	exit(-1);
	(*head)->next=NULL;   /*将头结点的指针域置为空*/
}

ListNode *Locatenum(LinkList head,char find[])     //通过职工工号查找，返回定位指针。
{
	LinkList p;
	p=head->next;
	if(!p)       //如果职工信息记录为空，返回NULL。
		return NULL;
	while(p)
	{
		if(strcmp(p->data.num,find)==0)
			return p;
		p=p->next;
	}
	return NULL;
}

ListNode *Locatename(LinkList head,char find[])     //通过职工姓名查找，返回定位指针。
{
	LinkList p;
	p=head->next;
	if(!p)       //如果职工信息记录为空，返回NULL。
		return NULL;
	while(p)
	{
		if(strcmp(p->data.name,find)==0)
			return p;
		p=p->next;
	}
	return NULL;
}

ListNode *Locatesalary(LinkList head,int salary)    //通过职工实际工资查找，返回定位指针。
{
	LinkList p;
	p=head->next;
	if(!p)       //如果职工信息记录为空，返回NULL。    
    	return NULL;
	while(p)
	{
		if(p->data.real_salary==salary)
			return p;
		p=p->next;
	}
	return NULL;
}

void Nofind()
{
	printf("\n***提示***：没有找到该职工！\n");
}

void Modify(LinkList L)    //修改功能。
{
	   ListNode *p; 
	   char find[20]; 
	   if(!L->next) 
	   { 
		   printf("\n***提示***:没有资料可以修改!\n"); 
		   return; 
	   } 
	   
	   printf("请你输入要修改的职工工号："); 
	   scanf("%s",find); 
	   p=Locatenum(L,find); 
	   
	   if(p) 
	   { 
		   printf("请你输入新的工号(原来是%s):",p->data.num); 
		   scanf("%s",p->data.num); 
		   getchar();
		   printf("\n");
		   
		   printf("请你输入新的姓名(原来是%s):",p->data.name); 
		   scanf("%s",p->data.name); 
		   getchar(); 
		   printf("\n");
		   
		   printf("请你输入新的基本工资(原来是%d):",p->data.base_salary); 
		   scanf("%d",&p->data.base_salary); 
		   printf("\n");
		   
		   printf("请你输入新的岗位津贴(原来是%d):",p->data.pro_salary); 
		   scanf("%d",&p->data.pro_salary); 
		   printf("\n");

		   printf("请你输入新的其他补贴(原来是%d):",p->data.other_salary); 
		   scanf("%d",&p->data.other_salary); 
		   printf("\n");

		   printf("请你输入新的所得税(原来是%d):",p->data.tax); 
		   scanf("%d",&p->data.tax); 
		   printf("\n");

		   printf("请你输入新的住房公积金(原来是%d):",p->data.home_money); 
		   scanf("%d",&p->data.home_money); 
		   printf("\n");

		   printf("请你输入新的养老金(原来是%d):",p->data.old_money); 
		   scanf("%d",&p->data.old_money); 
		   printf("\n");

		   printf("请你输入新的医疗保险(原来是%d):",p->data.medicial_money); 
		   scanf("%d",&p->data.medicial_money); 
		   printf("\n");

		   printf("请你输入新的失业保险(原来是%d):",p->data.losswork_money); 
		   scanf("%d",&p->data.losswork_money); 
		   printf("\n");

		   printf("\n");
		   printf("\n***提示***:资料修改成功!\n");
		   saveflag=1;
	   } 
	   else 
		   Nofind(); //if(p)结束
}  //void Modify(LinkList L)    //修改功能结束

void Add(LinkList head)   /* 录入职工信息 */
{
	ListNode *p,*r,*s;    /* 实现添加操作的临时的结构体指针变量 */
	int sign;             /* 标记重复工号的变量 */
	char num[10];
	r=head;
	s=head->next;         /* 链表没有节点时，s=NULL;链表有节点时，指向第一个职工节点 */
	while(r->next!=NULL)  /* 如果存在后继结点时，r指针后移一个 */
		r=r->next;        /* 将指针移至于链表最末尾，准备添加记录 */
	printf("输入'#'将退出职工信息录入，退回至主菜单！\n\n");
	while(1)
	{
		printf("（PS:职工号为'#'即退出录入功能）\n\n");
		printf("请输入职工号：");
		fflush(stdin);          //清除缓冲区。
		gets(num);
		if(strcmp(num,"#")==0)  /* 输入'0',跳出while(1),即跳出Add()函数 */
			break;
	  	s=head->next;           /* 每次从第一个节点开始找，看num是否重复。*/
			while(s)
			{
				if(strcmp(s->data.num,num)==0)
				{
					printf("***提示***\n工号为：'%s'的职工信息已经存在！\n",num);
					printf("若要修改请按'4'，放弃请按'0'！\n");
					scanf("%d",&sign);
					if(sign==4)
						Modify(head);
					else
						return;
				}
				s=s->next; 
			}//while(s)
			if((p=(LinkList)malloc(sizeof(ListNode)))==NULL)  //生成没赋值的新节点 p。
			{
				printf("系统分配存储空间失败！\n");
				printf("退出程序！\n");
				exit(-1);
			} 
			else
			{
			strcpy(p->data.num,num);
		
			printf("\n");
	
			//	printf("%s",p->data.num);
			printf("请输入该职工姓名：");
			scanf("%s",p->data.name);
			getchar();
			printf("\n");

			printf("请输入该职工的基本工资：");
			scanf("%d",&p->data.base_salary);
			printf("\n");

			printf("请输入该职工的岗位津贴：");
			scanf("%d",&p->data.pro_salary);
			printf("\n");

			printf("请输入该职工的其他补贴：");
			scanf("%d",&p->data.other_salary);
			printf("\n");

			printf("请输入该职工的所得税：");
			scanf("%d",&p->data.tax);
			printf("\n");

			printf("请输入该职工的住房公积金：");
			scanf("%d",&p->data.home_money);
			printf("\n");

			printf("请输入该职工的养老金：");
           	scanf("%d",&p->data.old_money);
				printf("\n");
			printf("请输入该职工的医疗保险：");
           	scanf("%d",&p->data.medicial_money);
				printf("\n");
			printf("请输入该职工的失业保险：");
           	scanf("%d",&p->data.losswork_money);
				printf("\n");
			(p->data.should_salary)=((p->data.base_salary))+((p->data.pro_salary))+((p->data.other_salary))
				-((p->data.tax))-((p->data.home_money))-((p->data.old_money))-((p->data.medicial_money))-((p->data.losswork_money));
	        printf("该员工应发工资为：%d\n",(p->data.should_salary));
				printf("\n");
                (p->data.real_salary)=((p->data.base_salary))+((p->data.pro_salary))+((p->data.other_salary))
				-((p->data.tax))-((p->data.home_money))-((p->data.old_money))-((p->data.medicial_money))-((p->data.losswork_money));
			 printf("该员工实发工资为：%d\n",(p->data.real_salary));
			printf("\n");
			p->next=NULL;   /* 表明这是链表的尾部结点 */
			r->next=p;      /* 将新建的结点加入链表尾部中 */
			r=p;
			saveflag=1;
			printf("\n");
        
			}
	}//while(1)
}//void Add函数结束。

void printline()      //打印横线。
{
	printf("--------------------------------------------------------------------------------\n");
}

void printsubject()   //打印各分类标题。
{
	printf("工号\t姓名\t基本工资\t刚位津贴\t其他补贴\t所得税\t住房公积金\t养老金\t医疗保险\t失业保险\t实际工资\t应发工资\n");
}

void printLinkList(LinkList p)   //打印p结点各个数据成员的值。
{
	printf(" %s\t%s\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\n"
		,p->data.num,p->data.name,p->data.base_salary,p->data.pro_salary,p->data.old_money
		,p->data.tax,p->data.home_money,p->data.old_money,p->data.medicial_money,p->data.losswork_money,p->data.real_salary,p->data.should_salary);
}

void Allemployeeinfo(LinkList head)  //显示所有职工信息。
{
	int count=0;
	ListNode *p;
	p=head->next;
	if(!p)
	{
		printf("***提示***：目前没有存储任何职工记录！\n");
		printf("返回主菜单，请重新选择功能！\n");
		return;
	}
	printf("\t\t\t\t显示结果\n");
	printline();
	printsubject();
	printf("\n");
	while(p)
	{
		printLinkList(p);
		p=p->next;
		count++;
	}
	printline();
	printf("\n");
	printf("已经存储了%d条职工信息！\n",count);
}

void Wrong()
{
	printf("\n***提示***:输入错误！\n");
}

void menu()   //主菜单。
{
	printf("\n");
	printf("\t*******************************************************************\n");
	printf("\t*                                                                 *\n");
	printf("\t*                                                                 *\n");
	printf("\t*                      < 职工信息管理系统 >                       *\n");
	printf("\t*                                                                 *\n");
	printf("\t*       [1]    录入职工信息            [2]    删除职工信息        *\n");
	printf("\t*       [3]    查询职工信息            [4]    修改职工信息        *\n");
	printf("\t*       [5]    插入职工记录            [6]    统计职工信息        *\n");
	printf("\t*       [7]    保存职工信息            [8]    显示所有职工信息    *\n");
	printf("\t*                        [9]    退出系统                          *\n");
	printf("\t*******************************************************************\n");
} //void menu菜单结束。

void Del(LinkList L)  //删除职工信息。
{
	int select;       //删除方式选择记录变量。
	ListNode *p,*r;
	char find[20];
	if(!L->next)      //当list无后继结点时，提示和结束Del()函数。
	{
		printf("\n***提示***：没有记录可以删除！\n"); 
		return; 
	} 
	printf("\n按工号删除，请按'1'\n按姓名删除，请按'2'\n");
	printf("\n=====>功能选择：");
	scanf("%d",&select);
	if(select==1)
	{
		printf("请输入要删除的职工工号：");
		scanf("%s",find);
		getchar();
		p=Locatenum(L,find);
		if(p)
		{
			r=L;
			while(r->next!=p)
				r=r->next;  //从第一个结点找起，直到发现r->next=p, 是待删除结点,跳出循环。
			r->next=p->next;
			free(p);
			printf("\n***提示***：该职工信息已成功删除！\n");
			saveflag=1;
		}
		else
			Nofind();
	}//if(select==1).
	else if(select==2)
	{
		printf("请输入要删除的职工姓名：");
		scanf("%s",find);
		getchar();
		p=Locatename(L,find);
		if(p)
		{
			r=L;
			while(r->next!=p)
				r=r->next;
			r->next=p->next;
			free(p);
			printf("\n***提示***：该职工信息已成功删除！\n");
			saveflag=1;
		}
		else
			Nofind();
	}//if(select==2).
	else
		Wrong();    //显示输入错误的话
}//void Del()删除函数结束。

void Search(LinkList L)      //查询职工信息。
{
	int select;
	int salary;
	int sign=0;
	char find[20];
	ListNode *p;             //实现查询操作的临时结构体指针变量。
	if(!L->next)
	{
		printf("\n***提示***：没有职工信息资料可以查询！\n");
		printf("返回主菜单，请重新选择功能！\n");
		return;
	}
	printf("\n按工号查找，请按'1'\n按工资查找，请按'2'\n按姓名查找，请按'3'\n");
	printf("\n=====>功能选择：");
	scanf("%d",&select);
	printf("\n");
	if(select==1)             //工号。
	{
		printf("请输入要查找的工号：");
		scanf("%s",find);
		getchar();
		p=Locatenum(L,find);
		if(p)
		{
			printf("\t\t\t\t   查找结果\n");
			printline();        //打印横线。
			printsubject();     //打印各分类标题。
			printLinkList(p);   //打印p结点各个数据成员的值。
			printline();        //打印横线。
		}
		else
			Nofind();
	}
	else if(select==2)          //工资。
	{
		printf("请输入要查找的工资：");
		scanf("%d",&salary);
		p=Locatesalary(L,salary);
		if(p)
		{
			printf("\t\t\t\t查找结果\n");
			printline();
			printsubject();
			printLinkList(p);
			printline();
			sign++;
		}
		while(p)
		{
			p=Locatesalary(p,salary);
			if(p)
		{
			printf("\t\t\t\t查找结果\n");
			printline();
			printsubject();
			printLinkList(p);
			printline();
			sign++;
		}
		}
		if(sign==0)
			Nofind();
	}
	else if(select==3)         //姓名。
	{
		printf("请输入要查找的姓名：");
		scanf("%s",find);
		getchar();
		p=Locatename(L,find);
		if(p)
		{
			printf("\t\t\t\t查找结果\n");
			printline();
			printsubject();
			printLinkList(p);
			printline();
		}
		else
			Nofind();
	}
	else
		Wrong();
}//void Search()查询函数结束。

 void Save(LinkList L)                            //信息保存到文件中。
{
	FILE *fp;
	ListNode *p;
	int count=0;
	int flag=1;
	int flag1=1;
	fp=fopen("D:\\Employeeinfo.txt","w");
	if(fp==NULL)
	{
		printf("\n***提示***：打开文件时发生错误！\n");      
		return;
	}
	p=L->next;
	while(p)
	{
	 if(flag1==1)
	 {
	  fprintf(fp,"工号\t姓名\t基本工资\t岗位津贴\t其他补贴\t所得税\t住房公积金\t养老金\t\t医疗保险\t\t失业保险\t\t实际工资\t\t应发工资\n");
        	flag1=0;
	 }
		if(fprintf(fp,"%s\t%s\t%d\t\t%d\t\t%d\t\t%d\t%d\t\t%d\t\t%d\t\t\t%d\t\t\t%d\t\t\t%d\n"
		,p->data.num,p->data.name,p->data.base_salary,p->data.pro_salary,p->data.old_money
		,p->data.tax,p->data.home_money,p->data.old_money,p->data.medicial_money,p->data.losswork_money,p->data.real_salary,p->data.should_salary)>0)   
		{ 
			   p=p->next;                         //依次写入下一个结点的值。
			   count++;                           //文件的记录数+1。
		} 
		   else 
		   { 
			   flag=0; 
			   printf("写入文件过程发生错误！\n");
			   break; 
		   } 
		
	}//while(p).
	if(count>0)
	{
		printf("\n      ***提示***：文件保存成功\n     ",count); 
		saveflag=0; 
	}
	else
	{
		system("cls");//清屏。
		printf("文件保存失败！'0'条记录被保存。\n");
	}
    	fclose(fp);

}//void Save()函数结束。

void Statistics(LinkList L) //统计职工中的最高工资和最低工资。
{
	ListNode *Max,*Min;
	int i;
	ListNode *t=L->next;
	if(!t)
	{
		system("cls");      //清屏。
		printf("没有储存任何职工记录！\n");
		printf("返回主菜单，请先录入职工信息！\n");
		return;
	}
	system("cls");
	Max=Min=t;
	t=t->next;
	while(t)
	{
		if(Max->data.real_salary<t->data.real_salary)
			Max=t;          //Max指针指向最高工资的职工结点。
		if(Min->data.real_salary>t->data.real_salary)
			Min=t;          //Min指针指向最低工资的职工结点。
		t=t->next;
	}
	printf("最高工资为：%d\n",Max->data.real_salary);
	printf("最低工资为：%d\n",Min->data.real_salary);
	printf("若要查看最低，最高工资的相关职工信息，\n");
	printf("请按'1'，然后按照提示进行相关操作，\n");
	printf("否则，请按'1'除外的任何数字键以退出统计功能，返回主菜单。\n");
	printf("\n=====>功能选择：");
	scanf("%d",&i);
	if(i==1)
		Search(L);          //显示符合要求的职工信息。
	else
		return;
}

void Insert(LinkList L)     //插入新的职工信息。
{

	ListNode *p,*s;
	char find[20];          //存放工号和姓名的变量。
	int i;
	printf("本功能可以通过姓名和工号查找到符合要求的\n");  //功能介绍。
	printf("相关职工信息，然后将您希望添加进去的新的\n");
	printf("职工信息插入到该职工信息记录的后面。\n");
	printf("通过姓名查找，请按'1'。\n");
	printf("通过工号查找，请按'2'。\n");
	printf("返回主菜单，请按'3'。\n");
	printf("\n=====>功能选择：");
	scanf("%d",&i);
	printf("\n");
	if(i==3)
	{
		system("cls");      //退出插入功能，返回主菜单。
		return;
	}
	else if(i==1)
	{
		printf("请输入已在存储记录中的职工姓名：");
		scanf("%s",find);
		getchar();
		p=Locatename(L,find); //定位。
		if(!p)
		{
			printf("您输入的该职工姓名不在信息记录中，请重新核审！\n");
			printf("返回主菜单。\n");
			return;
		}
		s=(LinkList)malloc(sizeof(ListNode));
		if(!s)
		{
			printf("系统分配存储空间失败！\n");
			system("cls");
			return;
		}
	     	printf("请输入新职工工号：");
	     	gets(s->data.num);
		    printf("\n");
			printf("请输入新职工姓名：");
			scanf("%s",s->data.name);
			getchar();
			printf("\n");
			printf("请输入新职工的基本工资：");
			scanf("%d",&s->data.base_salary);
			printf("\n");
			printf("请输入新职工的岗位津贴：");
			scanf("%d",&s->data.pro_salary);
			printf("\n");
			printf("请输入新职工的其他补贴：");
			scanf("%d",&s->data.other_salary);
			printf("\n");
			printf("请输入新职工的所得税：");
			scanf("%d",&s->data.tax);
			printf("\n");
			printf("请输入新职工的住房公积金：");
			scanf("%d",&s->data.home_money);
			printf("\n");
			printf("请输入新职工的养老金：");
           	scanf("%d",&s->data.old_money);
					printf("\n");
			printf("请输入新职工的医疗保险：");
           	scanf("%d",&s->data.medicial_money);
					printf("\n");
			printf("请输入新职工的失业保险：");
           	scanf("%d",&s->data.losswork_money);

	    (s->data.should_salary)=((s->data.base_salary))+((s->data.pro_salary))+((s->data.other_salary))
				-((s->data.tax))-((s->data.home_money))-((s->data.old_money))-((s->data.medicial_money))-((s->data.losswork_money));
	        printf("新员工应发工资为：%d\n",(s->data.should_salary));
                (s->data.real_salary)=((s->data.base_salary))+((s->data.pro_salary))+((s->data.other_salary))
				-((s->data.tax))-((s->data.home_money))-((s->data.old_money))-((s->data.medicial_money))-((s->data.losswork_money));
			 printf("新员工实发工资为：%d\n",(s->data.real_salary));



		s->next=p->next;
		p->next=s;
	    printf("姓名为：%s的新职工信息已成功插到姓名为：%s的职工信息记录后面。\n",s->data.name,p->data.name);
		saveflag=1;          //资料已改动的存储变量。
	}
	else if(i==2)
	{
		printf("请输入已在存储记录中的职工工号：");
		scanf("%s",find);
		getchar();
		p=Locatenum(L,find); //定位。
		if(!p)
		{
			printf("您输入的该职工工号不在信息记录中，请重新核审！\n");
			printf("返回主菜单。\n");
			return;
		}
		s=(LinkList)malloc(sizeof(ListNode));
		if(!s)
		{
			printf("系统分配存储空间失败！\n");
			system("cls");
			return;
		}

        	printf("请输入新职工工号：");
	     	gets(s->data.num);
		    printf("\n");
			printf("请输入新职工姓名：");
			scanf("%s",s->data.name);
			getchar();
			printf("\n");
			printf("请输入新职工的基本工资：");
			scanf("%d",&s->data.base_salary);
			printf("\n");
			printf("请输入新职工的岗位津贴：");
			scanf("%d",&s->data.pro_salary);
			printf("\n");
			printf("请输入新职工的其他补贴：");
			scanf("%d",&s->data.other_salary);
			printf("\n");
			printf("请输入新职工的所得税：");
			scanf("%d",&s->data.tax);
			printf("\n");
			printf("请输入新职工的住房公积金：");
			scanf("%d",&s->data.home_money);
			printf("\n");
			printf("请输入新职工的养老金：");
           	scanf("%d",&s->data.old_money);
			printf("请输入新职工的医疗保险：");
           	scanf("%d",&s->data.medicial_money);
			printf("请输入新职工的失业保险：");
           	scanf("%d",&s->data.losswork_money);

	    (s->data.should_salary)=((s->data.base_salary))+((s->data.pro_salary))+((s->data.other_salary))
				-((s->data.tax))-((s->data.home_money))-((s->data.old_money))-((s->data.medicial_money))-((s->data.losswork_money));
	        printf("新员工应发工资为：%d",(s->data.should_salary));
                (s->data.real_salary)=((s->data.base_salary))+((s->data.pro_salary))+((s->data.other_salary))
				-((s->data.tax))-((s->data.home_money))-((s->data.old_money))-((s->data.medicial_money))-((s->data.losswork_money));
			 printf("新员工实发工资为：%d",(s->data.real_salary));

		printf("\n");
		s->next=p->next;
		p->next=s;
		printf("姓名为：%s的新职工信息已成功插到姓名为：%s的职工信息记录后面。\n",s->data.name,p->data.name);
		saveflag=1;
	}
	else
	{
		printf("功能选择有误！返回主菜单。\n");
		return;
	}
}

void main()
{
	   LinkList L; /*定义链表*/ // struct Node *list;
	   FILE *fp;  /* 文件指针 */ 
	   int choose; /*保存选择结果变量*/
	   char ch;     /*保存(y,Y,n,N)*/
	   int count=0; /*保存文件中的记录条数（或结点个数）*/
	   struct Node *p,*r;   /*定义记录指针变量*/
	   printf("\t\t\t\t职工信息管理系统\n\t\t\t\t\n"); 
	   L=(struct Node*)malloc(sizeof(struct Node)); 
	   if(!L)
	   {
		   printf("\n系统分配存储空间失败！\n"); /*如没有申请到，打印提示信息*/
		   return ;             /*返回菜单*/
	   }
	   L->next=NULL; 
	   r=L; 
	   fp=fopen("D:\\Employeeinfo.txt","rb"); 
	   if(fp==NULL) 
	   { 
		   printf("\n***提示***：存储职工信息的文件还不存在，是否创建？(y/n)\n"); 
		   scanf("%c",&ch); 
		   if(ch=='y'||ch=='Y') 
		   {
			   fp=fopen("D:\\Employeeinfo.txt","ab+"); 
			   printf("文件创建成功！\n");
		   }
		   else 
		   {
			   printf("文件没有创建，无法写入职工信息！\n\n");
			   printf("<-----退 出 职 工 信 息 管 理 系 统----->\n");
			   exit(0); 
		   }
	   } //	if(fp==NULL) 
	   
	   printf("\n=====>提示:文件已经打开,正在导入记录......\n"); 
	   
	   while(!feof(fp)) //没有到文件尾时，循环
	   { 
		   p=(struct Node*)malloc(sizeof(struct Node)); 
		   if(!p)
		   {
			   printf(" memory malloc failure!\n");    /*没有申请成功*/
			   exit(0);       /*退出*/
		   }
		   
		   if(fread(p,sizeof(struct Node),1,fp)) /* 读文件的已有内容放入结点中 */ 
		   { 
			   p->next=NULL; 
			   r->next=p; 
			   r=p; /* 将该结点挂入链表中, r指向最后的节点 */ 
			   count++; 
		   } 
		   //循环中多开辟了一个Node，应该释放
			    free(r->next);
				 r->next = NULL;
    //END 释放
	   } //while(!feof(fp)) 
	   
	   fclose(fp); /* 关闭文件 */ 
	   printf("\n=====>提示:记录导入完毕,共导入%d条记录。\n",count); 
	   while(1) 
	   { 
		   menu(); 
		   printf("\t\t====>请选择：");
		   scanf("%d",&choose);
		   if(choose==0) 
		   { 
			   if(saveflag==1) 
			   { 
				   getchar(); 
				   printf("\n=====>提示:资料已经改动,是否将改动保存到文件中(y/n)?\n"); 
				   scanf("%c",&ch); 
				   if(ch=='y'||ch=='Y') 
					   Save(L); 
			   } //if
			   printf("\n***提示***：您已经退出系统,欢迎再次使用！~\n"); 
			   break; 
		   }//if 
		switch(choose)
		{
		case 1:Add(L);
			break;

		case 2:Del(L);
			break;

		case 3:Search(L);
			break;

		case 4:Modify(L);
			break;

		case 5:Insert(L);
			break;

		case 6:Statistics(L);
			break;

		case 7:
			Save(L);
			break;

		case 8:
			system("cls");
			Allemployeeinfo(L);
			break;

		case 9:
			printf("感谢本次使用!\n");
			system("pause");
			break;
		default:
			Wrong();
			break;
		}
	}
}
